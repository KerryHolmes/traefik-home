{{ $home_container := where $ "ID" .Docker.CurrentContainerID | first }}
{{ $show_status_dot := or (index $home_container.Labels "traefik-home.show-status-dot") "true" | parseBool }}

<!DOCTYPE html>
<html lang="en" class="min-vh-100">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home</title>
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" 
          integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    {{/* Some custom style */}}
    <style>

        :root {
            --tile-1-bgcolor: #3cb0c7;
            --tile-2-bgcolor: green;
            --tile-3-bgcolor: #ffc107;
        }

        div[data-name]:before {
            content: attr(data-name);
            background: red;
            min-height: 100px;
            font-size: 4em;
            text-transform: uppercase;
            color: white;
            padding: 0.5em;
            box-shadow: 5px 5px 15px -10px rgb(0 0 0 / 75%);
            display: table;
            width: 100%;
        }

        .icon {
            height: 160px;
            padding: 20px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }

        span[data-running] {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }

        span[data-running=true] {
            box-shadow: 0px 0px 10px green;
            background-color: green;
        }

        span[data-running=false] {
            box-shadow: 0px 0px 10px red;
            background-color: red;
        }

        /* first, nth+1, 2nth+1, etc*/
        .row > div:nth-of-type(3n+1) div[data-name]::before {
            background: var(--tile-1-bgcolor);
        }
        .row > div:nth-of-type(3n+2) div[data-name]::before {
            background: var(--tile-2-bgcolor);
        }
        .row > div:nth-of-type(3n+3) div[data-name]::before {
            background: var(--tile-3-bgcolor);
        }
    </style>
</head>
<body class="d-flex flex-column min-vh-100 bg-dark">
    <nav class="navbar navbar-fixed-top navbar-dark bg-dark">
        <div class="container">
            <div class="navbar-header m-auto">
                <span class="navbar-brand">
                    Applications
                </span>
            </div>
        </div>
    </nav>
    <div class="container my-auto pb-4">
        {{/* Display only containers explicitly enabled */}}
        {{ $containers := whereLabelValueMatches $ "traefik.enable" "true" }}
        <div class="row flex-column">            
            {{ range $container := $containers }}        

                {{/* Do not show myself or hidden containers */}}
                {{ if or (eq $container.ID $home_container.ID) (or (index $container.Labels "traefik-home.hide") "false" | parseBool)  }}
                    {{continue}}
                {{ end }}

                {{/* host is saved on a label like traefik.http.routers.<name>.rule */}}
                {{/* since <name> is unknown, we must cycle throught all labels */}}
                {{ $service_name := "" }}
                {{ range $k := keys $container.Labels}}
                    {{ if (regexMatch "traefik\\.http\\.routers\\.(.)+\\.rule" $k) }}
                        {{/* I couldn't find a function that finds a group in a regex, so I just remove text before and after the group */}}
                        {{ $service_name = regexReplaceAll "traefik\\.http\\.routers\\." $k "" }}
                        {{ $service_name = regexReplaceAll "\\.rule" (regexFind "(.)+\\.rule$" $service_name) "" }}
                        
                        {{/* skip container if service_name was not found */}}
                        {{ if eq $service_name "" }}
                            {{continue}}
                        {{ end }}

                        {{ $host_label := print "traefik.http.routers." $service_name ".rule" }}
                        {{ $host := index $container.Labels $host_label }}
                        {{/* Get the first parameter if host contains multiple values */}}
                        {{ $host := split $host "," | first }}
                        {{ $host := regexFind "([a-z0-9-]+\\.)+[a-z0-9-]+" $host }}
        
                        {{ $entrypoint_label := print "traefik.http.routers." $service_name ".entrypoints" }}
                        {{ $entrypoint := index $container.Labels $entrypoint_label }}
                        {{ $protocol := "" }}
                        {{ if or (eq $entrypoint "websecure") (eq $entrypoint "https") }}
                            {{ $protocol = "https" }}
                        {{ else if or (eq $entrypoint "web")  (eq $entrypoint "http") }}
                            {{ $protocol = "http" }}
                        {{ else }}
                            {{/* entrypoint not supported */}}
                            {{continue}}
                        {{ end }}
        
                        <div class="mt-4 mx-xl-2 w-auto">
                            <a class="text-decoration-none text-secondary" target="blank" href="{{ print $protocol "://" $host }}">
                                <div class="row-cols-1 text-center">
                                    {{/* if icon is set for this docker image then display it, otherwise use a generic icon made up by the first 2 letters */}}
                                    {{ $name := or (index $container.Labels "traefik-home.alias") $container.Name }}                   
                                    <div data-name='{{ $service_name }}' class="col mb-3"></div>
                                    <span class="col text-capitalize">
                                        {{ if $show_status_dot }}
                                            <span data-running="{{ $container.State.Running }}" class="me-2"></span>
                                        {{ end }}
                                        {{ $name }}
                                    </span>
                                </div>
                            </a>
                        </div>
                    {{ end }}
                {{ end }}
            {{ end }}
        </div>   
    </div>
</body>
</html>
